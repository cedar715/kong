apiVersion: v1
kind: Namespace
metadata:
  name: kong
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: postgres-pv
  namespace: kong
  labels:
    type: local
    app: postgres
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/mnt/data"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: postgres-pv-claim
  namespace: kong
  labels:
    app: postgres
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: kong
  labels:
    app: postgres
data:
  POSTGRES_DB: kong
  POSTGRES_USER: kong
---
apiVersion: v1
kind: Secret
metadata:
  name: kong-secrets
  namespace: kong
data:
  POSTGRES_PASSWORD: YWRtaW4xMjM=
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: kong
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:10.4
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-config
            - secretRef:
                name: kong-secrets
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgredb
      volumes:
        - name: postgredb
          persistentVolumeClaim:
            claimName: postgres-pv-claim
  selector:
    matchLabels:
      app: postgres
#Usage:
#  psql -h <host> -p <port> -u <database>
#  psql -h <host> -p <port> -U <username> -W <password> <database>
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: kong
  labels:
    app: postgres
    part-of: kong
spec:
  ports:
    - port: 5432
  selector:
    app: postgres
---
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-certs
  namespace: kong
data:
  cluster.crt: |
    -----BEGIN CERTIFICATE-----
    MIIFFTCCAv2gAwIBAgIUU939E9mt7irwOAHuOlHmfSmU/1AwDQYJKoZIhvcNAQEL
    BQAwGjEYMBYGA1UEAwwPa29uZ19jbHVzdGVyaW5nMB4XDTIwMDUwODE1MjcyNVoX
    DTIxMDUwODE1MjcyNVowGjEYMBYGA1UEAwwPa29uZ19jbHVzdGVyaW5nMIICIjAN
    BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAxCDz2UwTDDu9L5+a5oSCIx8RUhlb
    r+12XtxpDoWX12XgoB8X9NHU7augPD+jsn6ibAHvs7xfvFCrCsSjmKi+RwzJuSIU
    xBO0/n8cSxnR8waOHvr4oo0SOE6lZ+0CGwGfmerVI+huMGCKh162NY5LIeCK3BBP
    fSJid8e1nRBivfGcNdUnanYq72/sPELSLRa+QYU7h4O2UCIycCRU0vtNegcsVJ/5
    2H9Orei1kll/6Iz2iW9ZgmONVNRfYkuFM1tNzUZKDI94AwqTyXTXBsJ9tTe5qqx7
    V4d1vivQs9qWRzRrIsy+AhjmVU+MYPrDH053eu7hXKvVxXpcDa3a2HIekuVAT7PN
    ld8AL1yfStVq6+TRweLVGDMGYA44bsA1tOPn1Z/UTjy9MW0nfde7k3AD5F+5fpa5
    05Tg+PeLcAiMRv+UhY+U9xe2iKuST4/h4/uaTd9fVGyty+mQOHFq9UMFWdJkJvg3
    Xs06CKBILyBFWPZpoYcQkTjyz/2QcjC4EPlAf3aGsrSQlwxQ4QfkmbiAYKO/Nht/
    6P5OVNvsIrvcPjgbJ/oV1Amj6pbty2UUHo0SDWGsKlJPTaNzuZQ5xdMZghBaNm3h
    JoWJErm51ShoLczbskYoGb+rslnU04wlbu98qAh4n3y6JcucJRgYZVbe6xQJFqYG
    u2P48cJnwc1+gD0CAwEAAaNTMFEwHQYDVR0OBBYEFLxp8cc6SesrfXWxB8YAcM9H
    mm7mMB8GA1UdIwQYMBaAFLxp8cc6SesrfXWxB8YAcM9Hmm7mMA8GA1UdEwEB/wQF
    MAMBAf8wDQYJKoZIhvcNAQELBQADggIBAEFuJFgifBI42dwWPJzw36ma14sOuw/Z
    uZQdDGlOG0j8+0bGx0uvjZXlyf2BiG3V8qnTGDB3/F/OtNRYp3Toq/M/XAPj4moc
    LEEj2+pio7ni/evutg3FTOfi49rUDzFN2b8HzBVhaVhCTvD4TfQ0N68MnGVrShO0
    6hbk5OEJfrmJ6fXsK+utmkHLyA2VWVmlg8SBmZkZ0YLsKIjhyjGOD0aXJqwIgWsv
    3HV6wyNHFO/ORE6MIuG0bPDJ7xkVNVbrfFi3tlayMCg2LiJmJqtBtNXRlw+QubVh
    TFZ2MvjN8w+tgtFzk1UTNeA+7zL1KO7kCwNjZgyEmjSR7A3NGP9VtERrdm4v69Gx
    JKgi+4VqGZxurYduKQHju8BUdeqkH3askI5ePXXF61o1FDAqyI0x6nZo91NaMqeZ
    GffnRieFWyySxHjO1hMeEFBIwJ7lQsOOHSerYdczvSqAVbvV0CubONMj8Tvr1s1J
    agCW1/tfo2KHyE8AA76SOmzpA+B8qc+UKMvwjnQujXRrOZJq0LOEW79K9gD+qbEC
    Ebp2f25i9SCaDNgcMAuf4VA1avnH/PUAe3uM5Kq7sD3SEKBzQFmEucr9mNDpytod
    I3OH2L+elGUjUfBbNSdUxcO4iqXJCdvbD433HzaTeR2Pz1N+jY/Fxk/CJWRYKLiO
    azU+oSt6Lxj3
    -----END CERTIFICATE-----
  cluster.key: |
    -----BEGIN PRIVATE KEY-----
    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
    cz2RdknmP4G9j1YkE7TRKCoV/la9lUya
    -----END PRIVATE KEY-----
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-cp-cm
  namespace: kong
  labels:
    app: kong
    role: control-plane
data:
  KONG_ROLE: "control_plane"
  KONG_DATABASE: "postgres"
  KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
  KONG_CLUSTER_LISTEN: "0.0.0.0:8005"
  KONG_CLUSTER_CERT: "/etc/kong/certs/cluster.crt"
  KONG_CLUSTER_CERT_KEY: "/etc/kong/certs/cluster.key"
  KONG_NGINX_HTTP_INCLUDE: "/etc/kong/custom/servers.conf"
---
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-cp-server-blocks
  namespace: kong
data:
  servers.conf: |
    # Prometheus metrics server
    server {
        server_name kong_prometheus_exporter;
        listen 0.0.0.0:9542; # can be any other port as well
        access_log off;

        location /metrics {
            default_type text/plain;
            content_by_lua_block {
                 local prometheus = require "kong.plugins.prometheus.exporter"
                 prometheus:collect()
            }
        }

        location /nginx_status {
            internal;
            stub_status;
        }
    }
    # Health check server
    server {
        server_name kong_health_check;
        listen 0.0.0.0:9001; # can be any other port as well

        access_log off;
        location /health {
          return 200;
        }
    }
---
apiVersion: batch/v1
kind: Job
metadata:
  name: kong-db-migrations
  namespace: kong
  labels:
    app: kong
spec:
  template:
    metadata:
      labels:
        job-name: "kong-db-migrations"
    spec:
      containers:
        - name: kong-db-migrations
          image: kong:2.0.3-alpine
          env:
            - name: KONG_PG_HOST
              value: postgres
            - name: KONG_PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_PASSWORD
                  name: kong-secrets
          command:
            - "/bin/sh"
            - "-c"
            - "kong migrations bootstrap --vv"
      restartPolicy: OnFailure
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong-cp
  namespace: kong
  labels:
    app: kong
spec:
  selector:
    matchLabels:
      deploymentconfig: kong-cp
      role: control-plane
  template:
    metadata:
      name: kong-cp
      labels:
        app: kong
        deploymentconfig: kong-cp
        role: control-plane
    spec:
      volumes:
        - name: kong-server-blocks
          configMap:
            name: kong-cp-server-blocks
            items:
              - key: servers.conf
                path: servers.conf
        - name: kong-certs
          configMap:
            name: kong-certs
            items:
              - key: cluster.crt
                path: cluster.crt
              - key: cluster.key
                path: cluster.key
      containers:
        - name: kong-cp
          image: kong:2.0.3-alpine
          envFrom:
            - configMapRef:
                name: kong-cp-cm
          env:
            - name: KONG_PG_HOST
              value: postgres
            - name: KONG_PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_PASSWORD
                  name: kong-secrets
          volumeMounts:
            - mountPath: /etc/kong/custom
              name: kong-server-blocks
            - mountPath: /etc/kong/certs
              name: kong-certs
          ports:
            - containerPort: 8001
              name: admin
              protocol: TCP
            - containerPort: 8005
              name: cp-traffic
              protocol: TCP
            - containerPort: 9542
              name: prometheus
              protocol: TCP
            - containerPort: 9001
              name: health
              protocol: TCP
          readinessProbe:
            httpGet:
              port: health
              path: /health
            initialDelaySeconds: 30
            failureThreshold: 3
            periodSeconds: 60
          livenessProbe:
            httpGet:
              port: health
              path: /health
            initialDelaySeconds: 30
            failureThreshold: 3
            periodSeconds: 60
---
apiVersion: v1
kind: Service
metadata:
  name: kong-cp
  namespace: kong
  labels:
    app: kong
spec:
  type: NodePort
  selector:
    deploymentconfig: kong-cp
  ports:
    - port: 8001
      name: admin
    - port: 8005
      name: cp-traffic
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-dp-cm
  namespace: kong
  labels:
    app: kong
    role: data-plane
data:
  KONG_ROLE: "data_plane"
  KONG_CLUSTER_CONTROL_PLANE: "kong-cp:8005"
  KONG_DATABASE: "off"
  KONG_CLUSTER_CERT: "/etc/kong/certs/cluster.crt"
  KONG_CLUSTER_CERT_KEY: "/etc/kong/certs/cluster.key"
  KONG_LUA_SSL_TRUSTED_CERTIFICATE: "/etc/kong/certs/cluster.crt"
  KONG_NGINX_HTTP_INCLUDE: "/etc/kong/custom/servers.conf"
---
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-dp-server-blocks
  namespace: kong
data:
  servers.conf: |

    # Health check server
    server {
        server_name kong_health_check;
        listen 0.0.0.0:9001; # can be any other port as well

        access_log off;
        location /health {
          return 200;
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong-dp
  namespace: kong
  labels:
    app: kong
    role: data-plane
spec:
  selector:
    matchLabels:
      deploymentconfig: kong-dp
      role: data-plane
  template:
    metadata:
      name: kong-dp
      labels:
        app: kong
        deploymentconfig: kong-dp
        role: data-plane
    spec:
      volumes:
        - name: kong-server-blocks
          configMap:
            name: kong-dp-server-blocks
            items:
              - key: servers.conf
                path: servers.conf
        - name: kong-certs
          configMap:
            name: kong-certs
            items:
              - key: cluster.crt
                path: cluster.crt
              - key: cluster.key
                path: cluster.key
      containers:
        - name: kong-dp
          image: kong:2.0.3-alpine
          envFrom:
            - configMapRef:
                name: kong-dp-cm
          volumeMounts:
            - mountPath: /etc/kong/custom
              name: kong-server-blocks
            - mountPath: /etc/kong/certs
              name: kong-certs
          ports:
            - containerPort: 8000
              name: proxy
              protocol: TCP
            - containerPort: 9001
              name: health
              protocol: TCP
          readinessProbe:
            httpGet:
              port: health
              path: /health
            initialDelaySeconds: 30
            failureThreshold: 3
            periodSeconds: 60
          livenessProbe:
            httpGet:
              port: health
              path: /health
            initialDelaySeconds: 30
            failureThreshold: 3
            periodSeconds: 60
---
apiVersion: v1
kind: Service
metadata:
  name: kong-dp
  namespace: kong
  labels:
    app: kong
spec:
  type: NodePort
  selector:
    deploymentconfig: kong-dp
  ports:
    - port: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin
  namespace: kong
  labels:
    app: httpbin
    part-of: kong
spec:
  selector:
    matchLabels:
      deploymentconfig: httpbin
      app: httpbin
  template:
    metadata:
      labels:
        deploymentconfig: httpbin
        part-of: kong
        app: httpbin
    spec:
      containers:
        - name: httpbin
          image: k8s.gcr.io/echoserver:1.10
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: httpbin
  namespace: kong
  labels:
    app: httpbin
    part-of: kong
spec:
  type: NodePort
  selector:
    deploymentconfig: httpbin
  ports:
    - port: 8080